# Generated by Django 3.2.20 on 2023-11-20 10:07

import logging

from django.core.exceptions import ObjectDoesNotExist
from django.db import ProgrammingError, migrations, transaction

from open_inwoner.openzaak.clients import build_client
from open_inwoner.openzaak.zgw_imports import get_configurable_zaaktypes

logger = logging.getLogger(__name__)


def populate_zaaktype_config_urls(apps, schema_editor):
    """
    Go through configurable zaaktypen and populate the new URL field where needed
    """
    ZaakTypeConfig = apps.get_model("openzaak", "ZaakTypeConfig")
    CatalogusConfig = apps.get_model("openzaak", "CatalogusConfig")
    catalog_lookup = {c.url: c for c in CatalogusConfig.objects.all()}

    with transaction.atomic():
        try:
            client = build_client("catalogi")
            if not client:
                logger.warning(
                    "Not populating zaaktype config urls: could not build Catalogi API client"
                )
                return []

            zaaktypes = get_configurable_zaaktypes(client)
            if not zaaktypes:
                return []

        except ProgrammingError:
            return []

        for zaaktype in zaaktypes:
            catalog = catalog_lookup.get(zaaktype.catalogus)
            if not catalog:
                continue

            try:
                config = ZaakTypeConfig.objects.get(
                    catalogus=catalog, identificatie=zaaktype.identificatie
                )
                if zaaktype.url not in config.urls:
                    config.urls = config.urls + [zaaktype.url]
                    config.save()
            except ObjectDoesNotExist:
                continue


class Migration(migrations.Migration):

    dependencies = [
        ("openzaak", "0037_openzaakconfig_fetch_eherkenning_zaken_with_rsin"),
    ]

    operations = [
        migrations.RunPython(populate_zaaktype_config_urls, migrations.RunPython.noop),
    ]
