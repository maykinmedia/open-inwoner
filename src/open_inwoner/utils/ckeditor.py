from django.utils.text import slugify
from django.utils.translation import gettext as _

import markdown
from bs4 import BeautifulSoup

CLASS_ADDERS = [
    ("h1", "utrecht-heading-1"),
    ("h2", "utrecht-heading-2"),
    ("h3", "utrecht-heading-3"),
    ("h4", "utrecht-heading-4"),
    ("h5", "utrecht-heading-5"),
    ("h6", "utrecht-heading-6"),
    ("img", "image"),
    ("li", "li"),
    ("p", "utrecht-paragraph"),
    ("a", "link link--secondary"),
    ("table", "table table--content"),
    ("thead", "table__heading"),
    ("tbody", "table__body"),
    ("tr", "table__row"),
    ("th", "table__header"),
    ("td", "table__item"),
]


def convert_first_row_to_th(html_tables):
    """
    Converts the first row of all tables from td to th.
    """
    for table in html_tables.find_all("table"):
        first_row = table.find("tr")
        if first_row:
            for cell in first_row.find_all("td"):
                th = html_tables.new_tag("th")
                th.string = cell.string
                th.attrs = cell.attrs
                th["class"] = "table__header"
                cell.replace_with(th)


def get_rendered_content(content: str) -> str:
    """
    Takes object's content as an input and returns the rendered one.
    """
    md = markdown.Markdown(extensions=["tables"])
    # remove weird undocumented \\< escape/prefix generated by CKeditor
    content = content.replace("\\<", "<")
    html = md.convert(content)
    soup = BeautifulSoup(html, "html.parser")

    for tag, class_name in CLASS_ADDERS:
        for element in soup.find_all(tag):
            element.attrs["class"] = class_name
            if element.name == "a" and element.attrs.get("href", "").startswith("http"):
                element.attrs["target"] = "_blank"

    return str(soup)


def get_product_rendered_content(product):
    """
    Takes product's content as an input and returns the rendered one.
    """
    md = markdown.Markdown(extensions=["tables"])
    # remove weird undocumented \\< escape/prefix generated by CKeditor
    content = product.content.replace("\\<", "<")
    html = md.convert(content)
    soup = BeautifulSoup(html, "html.parser")

    convert_first_row_to_th(soup)

    for tag, class_name in CLASS_ADDERS:
        for element in soup.find_all(tag):
            if element.attrs.get("class") and "cta-button" in element.attrs["class"]:
                continue

            element.attrs["class"] = class_name

            if tag == "h2":
                element.attrs["id"] = f"subheading-{slugify(element.text)}"

            if "[CTABUTTON]" in element.text:
                # decompose the element when product doesn't have either a link or a form
                if not (product.link or product.form):
                    element.decompose()
                    continue

                # icon
                icon = soup.new_tag("span")
                icon.attrs.update(
                    {"aria-label": product.button_text, "class": "material-icons"}
                )
                icon.append("arrow_forward")

                # button
                element.name = "a"
                element.string = ""
                element.attrs.update(
                    {
                        "class": (
                            "button button--textless button--icon "
                            "button--icon-before button--primary cta-button"
                        ),
                        "href": (product.link if product.link else product.form_link),
                        "title": product.button_text,
                        "aria-label": product.button_text,
                    }
                )
                element.append(icon)
                element.append(product.button_text)

                if product.link:
                    element.attrs.update({"target": "_blank"})

            elif element.name == "a" and element.attrs.get("href", "").startswith(
                "http"
            ):
                icon = soup.new_tag("span")
                icon.attrs.update(
                    {
                        "aria-hidden": "true",
                        "class": "material-icons",
                    }
                )
                icon.append("open_in_new")

                screen_reader_only_text = soup.new_tag("span")
                screen_reader_only_text.attrs.update(
                    {
                        "class": "sr-only",
                    }
                )
                screen_reader_only_text.append(_("Opens external website"))

                element.append(icon)
                element.append(screen_reader_only_text)

    return soup
